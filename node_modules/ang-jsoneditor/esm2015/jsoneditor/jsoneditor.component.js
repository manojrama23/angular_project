/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import * as editor from 'jsoneditor';
export class JsonEditorComponent {
    constructor() {
        this.id = 'angjsoneditor' + Math.floor(Math.random() * 1000000);
        this.optionsChanged = false;
        this._data = {};
        this.options = new JsonEditorOptions();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value;
        if (this.editor) {
            this.editor.destroy();
            this.ngOnInit();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        let /** @type {?} */ optionsBefore = this.options;
        if (!this.optionsChanged && this.editor) {
            optionsBefore = this.editor.options;
        }
        this.editor = new editor(this.jsonEditorContainer.nativeElement, optionsBefore, this._data);
    }
    /**
     * @return {?}
     */
    collapseAll() {
        this.editor.collapseAll();
    }
    /**
     * @return {?}
     */
    expandAll() {
        this.editor.expandAll();
    }
    /**
     * @return {?}
     */
    focus() {
        this.editor.focus();
    }
    /**
     * @return {?}
     */
    get() {
        return this.editor.get();
    }
    /**
     * @return {?}
     */
    getMode() {
        return /** @type {?} */ (this.editor.getMode());
    }
    /**
     * @return {?}
     */
    getName() {
        return this.editor.getName();
    }
    /**
     * @return {?}
     */
    getText() {
        return this.editor.getText();
    }
    /**
     * @param {?} json
     * @return {?}
     */
    set(json) {
        this.editor.set(json);
    }
    /**
     * @param {?} mode
     * @return {?}
     */
    setMode(mode) {
        this.editor.setMode(mode);
    }
    /**
     * @param {?} name
     * @return {?}
     */
    setName(name) {
        this.editor.setName(name);
    }
    /**
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    setSelection(start, end) {
        this.editor.setSelection(start, end);
    }
    /**
     * @return {?}
     */
    getSelection() {
        return this.editor.getSelection();
    }
    /**
     * @param {?} schema
     * @return {?}
     */
    setSchema(schema) {
        this.editor.setSchema(schema);
    }
    /**
     * @param {?} newOptions
     * @return {?}
     */
    setOptions(newOptions) {
        if (this.editor) {
            this.editor.destroy();
        }
        this.optionsChanged = true;
        this.options = newOptions;
        this.ngOnInit();
    }
    /**
     * @return {?}
     */
    destroy() {
        this.editor.destroy();
    }
}
JsonEditorComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'json-editor',
                template: '<div [id]="id" #jsonEditorContainer></div>'
            },] },
];
/** @nocollapse */
JsonEditorComponent.ctorParameters = () => [];
JsonEditorComponent.propDecorators = {
    jsonEditorContainer: [{ type: ViewChild, args: ['jsonEditorContainer',] }],
    options: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }]
};
function JsonEditorComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    JsonEditorComponent.prototype.editor;
    /** @type {?} */
    JsonEditorComponent.prototype.id;
    /** @type {?} */
    JsonEditorComponent.prototype.optionsChanged;
    /** @type {?} */
    JsonEditorComponent.prototype.jsonEditorContainer;
    /** @type {?} */
    JsonEditorComponent.prototype._data;
    /** @type {?} */
    JsonEditorComponent.prototype.options;
}
/**
 * @record
 */
export function JsonEditorTreeNode() { }
function JsonEditorTreeNode_tsickle_Closure_declarations() {
    /** @type {?} */
    JsonEditorTreeNode.prototype.field;
    /** @type {?} */
    JsonEditorTreeNode.prototype.value;
    /** @type {?} */
    JsonEditorTreeNode.prototype.path;
}
export class JsonEditorOptions {
    constructor() {
        this.escapeUnicode = false;
        this.sortObjectKeys = false;
        this.history = true;
        this.mode = 'tree';
        this.search = true;
        this.indentation = 2;
    }
}
function JsonEditorOptions_tsickle_Closure_declarations() {
    /** @type {?} */
    JsonEditorOptions.prototype.ace;
    /** @type {?} */
    JsonEditorOptions.prototype.ajv;
    /** @type {?} */
    JsonEditorOptions.prototype.onChange;
    /** @type {?} */
    JsonEditorOptions.prototype.onEditable;
    /** @type {?} */
    JsonEditorOptions.prototype.onError;
    /** @type {?} */
    JsonEditorOptions.prototype.onModeChange;
    /** @type {?} */
    JsonEditorOptions.prototype.escapeUnicode;
    /** @type {?} */
    JsonEditorOptions.prototype.sortObjectKeys;
    /** @type {?} */
    JsonEditorOptions.prototype.history;
    /** @type {?} */
    JsonEditorOptions.prototype.mode;
    /** @type {?} */
    JsonEditorOptions.prototype.modes;
    /** @type {?} */
    JsonEditorOptions.prototype.name;
    /** @type {?} */
    JsonEditorOptions.prototype.schema;
    /** @type {?} */
    JsonEditorOptions.prototype.search;
    /** @type {?} */
    JsonEditorOptions.prototype.indentation;
    /** @type {?} */
    JsonEditorOptions.prototype.theme;
    /** @type {?} */
    JsonEditorOptions.prototype.language;
    /** @type {?} */
    JsonEditorOptions.prototype.languages;
    /**
     * Adds navigation bar to the menu - the navigation bar visualize the current position on
     * the tree structure as well as allows breadcrumbs navigation.
     * True by default.
     * Only applicable when mode is 'tree', 'form' or 'view'.
     * @type {?}
     */
    JsonEditorOptions.prototype.navigationBar;
    /**
     * Adds status bar to the bottom of the editor - the status bar shows the cursor position
     * and a count of the selected characters.
     * True by default.
     * Only applicable when mode is 'code' or 'text'.
     * @type {?}
     */
    JsonEditorOptions.prototype.statusBar;
}

//# sourceMappingURL=data:application/json;base64,