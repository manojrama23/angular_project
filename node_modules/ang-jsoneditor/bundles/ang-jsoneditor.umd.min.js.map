{"version":3,"sources":["ng://ang-jsoneditor/jsoneditor/jsoneditor.component.ts","ng://ang-jsoneditor/lib.module.ts"],"names":["JsonEditorComponent","Math","floor","random","JsonEditorOptions","Object","defineProperty","prototype","value","this","_data","editor","destroy","ngOnInit","optionsBefore","options","optionsChanged","jsonEditorContainer","nativeElement","collapseAll","expandAll","focus","get","getMode","getName","getText","set","json","setMode","mode","setName","name","setSelection","start","end","getSelection","setSchema","schema","setOptions","newOptions","Component","args","selector","template","ViewChild","Input","escapeUnicode","sortObjectKeys","history","search","indentation","NgJsonEditorModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"+WAAA,IAAAA,EAAA,WA8BE,SAAAA,YAjBY,gBAAkBC,KAAKC,MAAsB,IAAhBD,KAAKE,+BACtB,aAIA,gBAEc,IAAIC,SAC1CC,OAAAC,eACIN,EAAAO,UAAA,OAAI,KADR,SACSC,GACPC,KAAKC,MAAQF,EACTC,KAAKE,SACPF,KAAKE,OAAOC,UACZH,KAAKI,6CAOTb,EAAAO,UAAAM,SAAA,WACE,IAAIC,EAAgBL,KAAKM,SACpBN,KAAKO,gBAAkBP,KAAKE,SAC/BG,EAAgBL,KAAKE,OAAOI,SAE9BN,KAAKE,OAAS,IAAIA,EAAOF,KAAKQ,oBAAoBC,cAAeJ,EAAeL,KAAKC,QAGhFV,EAAAO,UAAAY,uBACLV,KAAKE,OAAOQ,eAGPnB,EAAAO,UAAAa,qBACLX,KAAKE,OAAOS,aAGPpB,EAAAO,UAAAc,iBACLZ,KAAKE,OAAOU,SAGPrB,EAAAO,UAAAe,eACL,OAAOb,KAAKE,OAAOW,OAGdtB,EAAAO,UAAAgB,mBACL,OAAOd,KAAKE,OAAOY,WAGdvB,EAAAO,UAAAiB,mBACL,OAAOf,KAAKE,OAAOa,WAGdxB,EAAAO,UAAAkB,mBACL,OAAOhB,KAAKE,OAAOc,WAGdzB,EAAAO,UAAAmB,aAAIC,GACTlB,KAAKE,OAAOe,IAAIC,IAGX3B,EAAAO,UAAAqB,iBAAQC,GACbpB,KAAKE,OAAOiB,QAAQC,IAGf7B,EAAAO,UAAAuB,iBAAQC,GACbtB,KAAKE,OAAOmB,QAAQC,IAGf/B,EAAAO,UAAAyB,sBAAaC,EAAOC,GACzBzB,KAAKE,OAAOqB,aAAaC,EAAOC,IAG3BlC,EAAAO,UAAA4B,wBACL,OAAO1B,KAAKE,OAAOwB,gBAGdnC,EAAAO,UAAA6B,mBAAUC,GACf5B,KAAKE,OAAOyB,UAAUC,IAGjBrC,EAAAO,UAAA+B,oBAAWC,GACZ9B,KAAKE,QACPF,KAAKE,OAAOC,UAEdH,KAAKO,gBAAiB,EACtBP,KAAKM,QAAUwB,EACf9B,KAAKI,YAGAb,EAAAO,UAAAK,mBACLH,KAAKE,OAAOC,+BAlGf4B,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,cACVC,SAAU,oIAQTC,EAAAA,UAASH,KAAA,CAAC,wCAIVI,EAAAA,oBACAA,EAAAA,MAAKJ,KAAA,CAAC,aArBT,GAmHArC,EAoCE,SAAAA,IACEK,KAAKqC,eAAgB,EACrBrC,KAAKsC,gBAAiB,EACtBtC,KAAKuC,SAAU,EACfvC,KAAKoB,KAAO,OACZpB,KAAKwC,QAAS,EACdxC,KAAKyC,YAAc,GC7JvBC,EAAA,gCAiBgBA,EAAAC,mBAEZ,MAAO,CACLC,SAAUF,EACVG,UAAW,yBAjBhBC,EAAAA,SAAQd,KAAA,CAAC,CACRe,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZ1D,GAEF2D,QAAS,CACP3D,SAZJ","sourcesContent":["import {\n  Component, ElementRef, Input, OnInit, ViewChild\n} from '@angular/core';\nimport * as editor from 'jsoneditor';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'json-editor',\n  template: '<div [id]=\"id\" #jsonEditorContainer></div>'\n})\n\nexport class JsonEditorComponent implements OnInit {\n  private editor: any;\n  public id = 'angjsoneditor' + Math.floor(Math.random() * 1000000);\n  public optionsChanged = false;\n\n  @ViewChild('jsonEditorContainer') jsonEditorContainer: ElementRef;\n\n  private _data: Object = {};\n\n  @Input() options: JsonEditorOptions = new JsonEditorOptions();\n  @Input('data')\n  set data(value: Object) {\n    this._data = value;\n    if (this.editor) {\n      this.editor.destroy();\n      this.ngOnInit();\n    }\n  }\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    let optionsBefore = this.options;\n    if (!this.optionsChanged && this.editor) {\n      optionsBefore = this.editor.options;\n    }\n    this.editor = new editor(this.jsonEditorContainer.nativeElement, optionsBefore, this._data);\n  }\n\n  public collapseAll() {\n    this.editor.collapseAll();\n  }\n\n  public expandAll() {\n    this.editor.expandAll();\n  }\n\n  public focus() {\n    this.editor.focus();\n  }\n\n  public get(): JSON {\n    return this.editor.get();\n  }\n\n  public getMode(): JsonEditorMode {\n    return this.editor.getMode() as JsonEditorMode;\n  }\n\n  public getName(): string {\n    return this.editor.getName();\n  }\n\n  public getText(): string {\n    return this.editor.getText();\n  }\n\n  public set(json: JSON) {\n    this.editor.set(json);\n  }\n\n  public setMode(mode: JsonEditorMode) {\n    this.editor.setMode(mode);\n  }\n\n  public setName(name: string) {\n    this.editor.setName(name);\n  }\n\n  public setSelection(start, end) {\n    this.editor.setSelection(start, end);\n  }\n\n  public getSelection(): any {\n    return this.editor.getSelection();\n  }\n\n  public setSchema(schema: any) {\n    this.editor.setSchema(schema);\n  }\n\n  public setOptions(newOptions: JsonEditorOptions) {\n    if (this.editor) {\n      this.editor.destroy();\n    }\n    this.optionsChanged = true;\n    this.options = newOptions;\n    this.ngOnInit();\n  }\n\n  public destroy() {\n    this.editor.destroy();\n  }\n}\n\nexport type JsonEditorMode = 'tree' | 'view' | 'form' | 'code' | 'text';\n\nexport interface JsonEditorTreeNode {\n  field: String,\n  value: String,\n  path: String[]\n}\n\nexport class JsonEditorOptions {\n  public ace: any;\n  public ajv: Object;\n  public onChange: () => void;\n  public onEditable: (node: JsonEditorTreeNode | {}) => boolean | { field: boolean, value: boolean };\n  public onError: (error: any) => void;\n  public onModeChange: (newMode: JsonEditorMode, oldMode: JsonEditorMode) => void;\n  public escapeUnicode: boolean;\n  public sortObjectKeys: boolean;\n  public history: boolean;\n  public mode: JsonEditorMode;\n  public modes: JsonEditorMode[];\n  public name: String;\n  public schema: Object;\n  public search: boolean;\n  public indentation: Number;\n  public theme: Number;\n  public language: String;\n  public languages: Object;\n\n  /**\n   * Adds navigation bar to the menu - the navigation bar visualize the current position on\n   * the tree structure as well as allows breadcrumbs navigation.\n   * True by default.\n   * Only applicable when mode is 'tree', 'form' or 'view'.\n   */\n  public navigationBar: boolean;\n\n  /**\n   * Adds status bar to the bottom of the editor - the status bar shows the cursor position\n   * and a count of the selected characters.\n   * True by default.\n   * Only applicable when mode is 'code' or 'text'.\n   */\n  public statusBar: boolean;\n\n  constructor() {\n    this.escapeUnicode = false;\n    this.sortObjectKeys = false;\n    this.history = true;\n    this.mode = 'tree';\n    this.search = true;\n    this.indentation = 2;\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { JsonEditorComponent } from './jsoneditor/jsoneditor.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    JsonEditorComponent\n  ],\n  exports: [\n    JsonEditorComponent\n  ]\n})\nexport class NgJsonEditorModule {\n\n  public static forRoot(): ModuleWithProviders {\n\n    return {\n      ngModule: NgJsonEditorModule,\n      providers: [\n      ]\n    };\n  }\n}\n"]}