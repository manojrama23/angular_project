/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import * as editor from 'jsoneditor';
var JsonEditorComponent = /** @class */ (function () {
    function JsonEditorComponent() {
        this.id = 'angjsoneditor' + Math.floor(Math.random() * 1000000);
        this.optionsChanged = false;
        this._data = {};
        this.options = new JsonEditorOptions();
    }
    Object.defineProperty(JsonEditorComponent.prototype, "data", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value;
            if (this.editor) {
                this.editor.destroy();
                this.ngOnInit();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    JsonEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ optionsBefore = this.options;
        if (!this.optionsChanged && this.editor) {
            optionsBefore = this.editor.options;
        }
        this.editor = new editor(this.jsonEditorContainer.nativeElement, optionsBefore, this._data);
    };
    /**
     * @return {?}
     */
    JsonEditorComponent.prototype.collapseAll = /**
     * @return {?}
     */
    function () {
        this.editor.collapseAll();
    };
    /**
     * @return {?}
     */
    JsonEditorComponent.prototype.expandAll = /**
     * @return {?}
     */
    function () {
        this.editor.expandAll();
    };
    /**
     * @return {?}
     */
    JsonEditorComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        this.editor.focus();
    };
    /**
     * @return {?}
     */
    JsonEditorComponent.prototype.get = /**
     * @return {?}
     */
    function () {
        return this.editor.get();
    };
    /**
     * @return {?}
     */
    JsonEditorComponent.prototype.getMode = /**
     * @return {?}
     */
    function () {
        return /** @type {?} */ (this.editor.getMode());
    };
    /**
     * @return {?}
     */
    JsonEditorComponent.prototype.getName = /**
     * @return {?}
     */
    function () {
        return this.editor.getName();
    };
    /**
     * @return {?}
     */
    JsonEditorComponent.prototype.getText = /**
     * @return {?}
     */
    function () {
        return this.editor.getText();
    };
    /**
     * @param {?} json
     * @return {?}
     */
    JsonEditorComponent.prototype.set = /**
     * @param {?} json
     * @return {?}
     */
    function (json) {
        this.editor.set(json);
    };
    /**
     * @param {?} mode
     * @return {?}
     */
    JsonEditorComponent.prototype.setMode = /**
     * @param {?} mode
     * @return {?}
     */
    function (mode) {
        this.editor.setMode(mode);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    JsonEditorComponent.prototype.setName = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.editor.setName(name);
    };
    /**
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    JsonEditorComponent.prototype.setSelection = /**
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    function (start, end) {
        this.editor.setSelection(start, end);
    };
    /**
     * @return {?}
     */
    JsonEditorComponent.prototype.getSelection = /**
     * @return {?}
     */
    function () {
        return this.editor.getSelection();
    };
    /**
     * @param {?} schema
     * @return {?}
     */
    JsonEditorComponent.prototype.setSchema = /**
     * @param {?} schema
     * @return {?}
     */
    function (schema) {
        this.editor.setSchema(schema);
    };
    /**
     * @param {?} newOptions
     * @return {?}
     */
    JsonEditorComponent.prototype.setOptions = /**
     * @param {?} newOptions
     * @return {?}
     */
    function (newOptions) {
        if (this.editor) {
            this.editor.destroy();
        }
        this.optionsChanged = true;
        this.options = newOptions;
        this.ngOnInit();
    };
    /**
     * @return {?}
     */
    JsonEditorComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.editor.destroy();
    };
    JsonEditorComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'json-editor',
                    template: '<div [id]="id" #jsonEditorContainer></div>'
                },] },
    ];
    /** @nocollapse */
    JsonEditorComponent.ctorParameters = function () { return []; };
    JsonEditorComponent.propDecorators = {
        jsonEditorContainer: [{ type: ViewChild, args: ['jsonEditorContainer',] }],
        options: [{ type: Input }],
        data: [{ type: Input, args: ['data',] }]
    };
    return JsonEditorComponent;
}());
export { JsonEditorComponent };
function JsonEditorComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    JsonEditorComponent.prototype.editor;
    /** @type {?} */
    JsonEditorComponent.prototype.id;
    /** @type {?} */
    JsonEditorComponent.prototype.optionsChanged;
    /** @type {?} */
    JsonEditorComponent.prototype.jsonEditorContainer;
    /** @type {?} */
    JsonEditorComponent.prototype._data;
    /** @type {?} */
    JsonEditorComponent.prototype.options;
}
/**
 * @record
 */
export function JsonEditorTreeNode() { }
function JsonEditorTreeNode_tsickle_Closure_declarations() {
    /** @type {?} */
    JsonEditorTreeNode.prototype.field;
    /** @type {?} */
    JsonEditorTreeNode.prototype.value;
    /** @type {?} */
    JsonEditorTreeNode.prototype.path;
}
var JsonEditorOptions = /** @class */ (function () {
    function JsonEditorOptions() {
        this.escapeUnicode = false;
        this.sortObjectKeys = false;
        this.history = true;
        this.mode = 'tree';
        this.search = true;
        this.indentation = 2;
    }
    return JsonEditorOptions;
}());
export { JsonEditorOptions };
function JsonEditorOptions_tsickle_Closure_declarations() {
    /** @type {?} */
    JsonEditorOptions.prototype.ace;
    /** @type {?} */
    JsonEditorOptions.prototype.ajv;
    /** @type {?} */
    JsonEditorOptions.prototype.onChange;
    /** @type {?} */
    JsonEditorOptions.prototype.onEditable;
    /** @type {?} */
    JsonEditorOptions.prototype.onError;
    /** @type {?} */
    JsonEditorOptions.prototype.onModeChange;
    /** @type {?} */
    JsonEditorOptions.prototype.escapeUnicode;
    /** @type {?} */
    JsonEditorOptions.prototype.sortObjectKeys;
    /** @type {?} */
    JsonEditorOptions.prototype.history;
    /** @type {?} */
    JsonEditorOptions.prototype.mode;
    /** @type {?} */
    JsonEditorOptions.prototype.modes;
    /** @type {?} */
    JsonEditorOptions.prototype.name;
    /** @type {?} */
    JsonEditorOptions.prototype.schema;
    /** @type {?} */
    JsonEditorOptions.prototype.search;
    /** @type {?} */
    JsonEditorOptions.prototype.indentation;
    /** @type {?} */
    JsonEditorOptions.prototype.theme;
    /** @type {?} */
    JsonEditorOptions.prototype.language;
    /** @type {?} */
    JsonEditorOptions.prototype.languages;
    /**
     * Adds navigation bar to the menu - the navigation bar visualize the current position on
     * the tree structure as well as allows breadcrumbs navigation.
     * True by default.
     * Only applicable when mode is 'tree', 'form' or 'view'.
     * @type {?}
     */
    JsonEditorOptions.prototype.navigationBar;
    /**
     * Adds status bar to the bottom of the editor - the status bar shows the cursor position
     * and a count of the selected characters.
     * True by default.
     * Only applicable when mode is 'code' or 'text'.
     * @type {?}
     */
    JsonEditorOptions.prototype.statusBar;
}

//# sourceMappingURL=data:application/json;base64,